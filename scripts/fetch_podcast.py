import os
import sys
import modal
import feedparser
from datetime import date

feed_url = sys.argv[1]

# Check to see if a post for this podcast already exists. If so, exit.
feed = feedparser.parse(feed_url)
podcast_title = feed['feed']['title']
episode_title = feed.entries[0]['title']

filename = "-".join(f"{podcast_title} {episode_title}.md".lower().split(" "))
filepath = f"content/podcasts/{filename}"

if (os.path.isfile(filepath)):
    print("File already exists")
    exit()

# Run Modal function to parse podcast
func = modal.Function.lookup("corise-podcast-project", "process_podcast")
results = func.remote(feed_url, '/content/podcast/')

details = results.get("podcast_details", False)
summary = results.get("podcast_summary", False)
guests = results.get("podcast_guests", False)
highlights = results.get("podcast_highlights", False)

if (not details):
    print("No podcast details found")
    exit()

# Use the details from the parsed podcast to ensure they're correct
filename = "-".join(f"{details['podcast_title']} {details['episode_title']}.md".lower().split(" "))
filepath = f"content/podcasts/{filename}"

# Create the podcast markdown file
template = f"""---
title: {details['podcast_title']} | {details['episode_title']}
date: {date.today()}
---

![episode image]({details['episode_image']})

"""

if (summary):
    template += f"## Summary\n\n"
    template += f"{summary}\n\n"

if (guests):
    template += f"## Guests\n\n"

    for guest in guests:
        guest_output = f"- {guest['name']}"

        if (guest.get("title", False)):
            guest_output += f" - _{guest['title']}_"

        if (guest.get("organization", False)):
            guest_output += f" - {guest['organization']}"

        if (guest.get("wiki", False)):
            guest_output += f" [[Wikipedia]({guest['wiki']['url']})]"

        template += f"{guest_output}\n"

if (highlights):
    template += f"\n## Highlights\n\n"
    template += f"{highlights}\n"

template += f"""
_Content generated by AI using [Whisper](https://openai.com/research/whisper) and [ChatGPT-3.5](https://openai.com/blog/chatgpt). Code used, including chat prompts, can be found on [GitHub](https://github.com/dustinbrownman/podcast-parser/blob/main/app/functions.py)._
"""

new_file = open(filepath, "w+")

new_file.write(template)
new_file.close()
