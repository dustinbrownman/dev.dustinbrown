import os
import sys
import modal
import feedparser
import re
from datetime import date

feed_urls = []

if (len(sys.argv) > 2 and sys.argv[1] == "--manual"):
    feed_urls = sys.argv[2:]
else:
    feed_urls = [
        "https://feeds.simplecast.com/2V4dK4EE",
        "https://feeds.simplecast.com/ioCY0vfY",
        "https://www.marketplace.org/feed/podcast/marketplace",
        "https://feeds.npr.org/510289/podcast.xml"
    ]

def create_filename(podcast_title, episode_title):
    # Remove any non-alphanumeric characters from the titles
    podcast_title = re.sub(r"[^\w\s\-]", "", podcast_title)
    episode_title = re.sub(r"[^\w\s\-]", "", episode_title)

    # Replace spaces with dashes and convert to lowercase
    podcast_title = podcast_title.lower().replace(" ", "-")
    episode_title = episode_title.lower().replace(" ", "-")

    # Combine the titles with a dash and return the filename
    return f"{podcast_title}-{episode_title}.md"

def build_latest_episode_summary(feed_url):
    # Check to see if a post for this podcast already exists. If so, exit.
    feed = feedparser.parse(feed_url)
    podcast_title = feed['feed']['title']
    episode_title = feed.entries[0]['title']

    filename = create_filename(podcast_title, episode_title)
    filepath = f"content/podcasts/{filename}"

    if (os.path.isfile(filepath)):
        print(f"{filename} already exists. Skipping...")
        return

    print(f"Processing {feed_url}...")
    # Run Modal function to parse podcast
    func = modal.Function.lookup("corise-podcast-project", "process_podcast")
    results = func.remote(feed_url, 0)

    details = results.get("podcast_details", False)
    summary = results.get("summary", False)
    guests = results.get("guests", False)
    highlights = results.get("highlights", False)

    if (not details):
        print("No podcast details found")
        return

    print("Creating podcast markdown file...")

    # Use the details from the parsed podcast to ensure they're correct
    filename = create_filename(details['title'], details['episode']['title'])
    filepath = f"content/podcasts/{filename}"

    # Create the podcast markdown file
    template = f"""---
title: {details['title']} | {details['episode']['title']}
date: {details['episode']['pubDate']}
---

![podcast image]({details['image']})

"""

    if (summary):
        template += f"## Summary\n\n"
        template += f"{summary}\n\n"

    if (guests):
        template += f"## Guests\n\n"

        for guest in guests:
            guest_output = f"- {guest['name']}"

            if (guest.get("title", False)):
                guest_output += f" - _{guest['title']}_"

            if (guest.get("organization", False)):
                guest_output += f" - {guest['organization']}"

            if (guest.get("wiki", False)):
                guest_output += f" [[Wikipedia]({guest['wiki']['url']})]"

            template += f"{guest_output}\n"

    if (highlights):
        template += f"\n## Highlights\n\n"
        template += f"{highlights}\n"

    template += f"""
_Content generated by AI using [Whisper](https://openai.com/research/whisper) and [ChatGPT-3.5](https://openai.com/blog/chatgpt). Code used, including chat prompts, can be found on [GitHub](https://github.com/dustinbrownman/podcast-parser/blob/main/app/functions.py)._
"""

    new_file = open(filepath, "w+")

    new_file.write(template.lstrip())
    new_file.close()

    print(f"Created {filepath}")

for url in feed_urls:
    build_latest_episode_summary(url)
